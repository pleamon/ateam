model Documentation {
    id        String   @id @default(uuid())
    projectId String
    project   Project  @relation(fields: [projectId], references: [id])
    name      String
    content   String
    type      String   @default("overview") // overview, technical, design, research, other
    url       String?
    teamId    String
    team      Team     @relation(fields: [teamId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Requirement {
    id        String   @id @default(uuid())
    projectId String
    project   Project  @relation(fields: [projectId], references: [id])
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RequirementQuestion {
    id        String   @id @default(uuid())
    projectId String
    project   Project  @relation(fields: [projectId], references: [id])
    question  String
    answer    String
    status    String   @default("todo") // todo, in_progress, done
    clarified Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DomainKnowledge {
    id             String   @id @default(uuid())
    projectId      String
    project        Project  @relation(fields: [projectId], references: [id])
    domain         String
    concepts       String[] // 概念
    commonPatterns String[] // 常见模式
    bestPractices  String[] // 最佳实践
    antiPatterns   String[] // 反模式
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Minimap {
    id        String   @id @default(uuid())
    projectId String
    project   Project  @relation(fields: [projectId], references: [id])
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SystemArchitecture {
    id                    String                 @id @default(uuid())
    projectId             String
    project               Project                @relation(fields: [projectId], references: [id])
    overview              String // 技术架构总览
    // 针对每个平台的架构描述，允许存储多平台的架构细节
    platformArchitectures PlatformArchitecture[] // 每个平台的技术架构详情
    platforms             String[] // 支持的平台（如 web, mobile, desktop 等）
    components            String[] // 主要组件
    technologies          String[] // 关键技术栈
    diagrams              String? // 架构图（可选，存储为URL或Base64）
    notes                 String? // 备注
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
}

model PlatformArchitecture {
    id                   String             @id @default(uuid())
    systemArchitectureId String
    systemArchitecture   SystemArchitecture @relation(fields: [systemArchitectureId], references: [id])
    platform             String // 平台名称（如 web, mobile, desktop 等）
    frontend             String? // 前端架构描述（可选）
    backend              String? // 后端架构描述（可选）
    technologies         String[] // 该平台的关键技术栈
    components           String[] // 该平台的主要组件
    diagrams             String? // 该平台的架构图（可选，存储为URL或Base64）
    notes                String? // 备注
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
}
