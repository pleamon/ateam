
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  teamId: 'teamId',
  name: 'name',
  description: 'description',
  workPrompt: 'workPrompt',
  responsibilities: 'responsibilities',
  skills: 'skills',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentTaskScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  taskId: 'taskId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentActivityScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  body: 'body',
  action: 'action',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentWorklogScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  agentId: 'agentId',
  taskId: 'taskId',
  workType: 'workType',
  summarize: 'summarize',
  nextPlan: 'nextPlan',
  content: 'content',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentPromptTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  responsibility: 'responsibility',
  prompt: 'prompt',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiDesignScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  apiName: 'apiName',
  apiPath: 'apiPath',
  apiMethod: 'apiMethod',
  apiVersion: 'apiVersion',
  platform: 'platform',
  module: 'module',
  apiDescription: 'apiDescription',
  businessLogic: 'businessLogic',
  apiContentType: 'apiContentType',
  requestHeaders: 'requestHeaders',
  requestParams: 'requestParams',
  requestBody: 'requestBody',
  responseHeaders: 'responseHeaders',
  responseBody: 'responseBody',
  authentication: 'authentication',
  authDetails: 'authDetails',
  permissions: 'permissions',
  rateLimit: 'rateLimit',
  timeout: 'timeout',
  maxPayloadSize: 'maxPayloadSize',
  status: 'status',
  deprecated: 'deprecated',
  deprecationDate: 'deprecationDate',
  sunsetDate: 'sunsetDate',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ApiExampleScalarFieldEnum = {
  id: 'id',
  apiDesignId: 'apiDesignId',
  name: 'name',
  description: 'description',
  requestUrl: 'requestUrl',
  requestHeaders: 'requestHeaders',
  requestParams: 'requestParams',
  requestBody: 'requestBody',
  responseStatus: 'responseStatus',
  responseHeaders: 'responseHeaders',
  responseBody: 'responseBody',
  notes: 'notes',
  isSuccess: 'isSuccess',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiErrorCodeScalarFieldEnum = {
  id: 'id',
  apiDesignId: 'apiDesignId',
  code: 'code',
  httpStatus: 'httpStatus',
  message: 'message',
  description: 'description',
  solution: 'solution',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemArchitectureScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  overview: 'overview',
  version: 'version',
  status: 'status',
  platforms: 'platforms',
  components: 'components',
  technologies: 'technologies',
  diagrams: 'diagrams',
  notes: 'notes',
  versionNumber: 'versionNumber',
  previousVersionId: 'previousVersionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PlatformArchitectureScalarFieldEnum = {
  id: 'id',
  systemArchitectureId: 'systemArchitectureId',
  platform: 'platform',
  displayName: 'displayName',
  description: 'description',
  frontend: 'frontend',
  backend: 'backend',
  infrastructure: 'infrastructure',
  technologies: 'technologies',
  components: 'components',
  dependencies: 'dependencies',
  deploymentStrategy: 'deploymentStrategy',
  scalingStrategy: 'scalingStrategy',
  diagrams: 'diagrams',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ArchitectureChangeHistoryScalarFieldEnum = {
  id: 'id',
  architectureId: 'architectureId',
  changeType: 'changeType',
  changeDescription: 'changeDescription',
  changeReason: 'changeReason',
  impact: 'impact',
  beforeChange: 'beforeChange',
  afterChange: 'afterChange',
  changedAt: 'changedAt',
  userId: 'userId'
};

exports.Prisma.DatabaseSchemaScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  schemaName: 'schemaName',
  engine: 'engine',
  charset: 'charset',
  collation: 'collation',
  description: 'description',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  userId: 'userId'
};

exports.Prisma.DatabaseTableScalarFieldEnum = {
  id: 'id',
  schemaId: 'schemaId',
  tableName: 'tableName',
  displayName: 'displayName',
  description: 'description',
  engine: 'engine',
  charset: 'charset',
  collation: 'collation',
  autoIncrement: 'autoIncrement',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TableColumnScalarFieldEnum = {
  id: 'id',
  tableId: 'tableId',
  columnName: 'columnName',
  displayName: 'displayName',
  columnType: 'columnType',
  length: 'length',
  precision: 'precision',
  scale: 'scale',
  isPrimaryKey: 'isPrimaryKey',
  isNullable: 'isNullable',
  isUnique: 'isUnique',
  isAutoIncrement: 'isAutoIncrement',
  defaultValue: 'defaultValue',
  comment: 'comment',
  enumValues: 'enumValues',
  isForeignKey: 'isForeignKey',
  referencedTable: 'referencedTable',
  referencedColumn: 'referencedColumn',
  onDelete: 'onDelete',
  onUpdate: 'onUpdate',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DatabaseIndexScalarFieldEnum = {
  id: 'id',
  tableId: 'tableId',
  indexName: 'indexName',
  indexType: 'indexType',
  columns: 'columns',
  isUnique: 'isUnique',
  comment: 'comment',
  algorithm: 'algorithm',
  lockOption: 'lockOption',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DatabaseRelationScalarFieldEnum = {
  id: 'id',
  schemaId: 'schemaId',
  relationName: 'relationName',
  relationType: 'relationType',
  sourceTableId: 'sourceTableId',
  sourceColumns: 'sourceColumns',
  targetTableId: 'targetTableId',
  targetColumns: 'targetColumns',
  onDelete: 'onDelete',
  onUpdate: 'onUpdate',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentationScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  content: 'content',
  summary: 'summary',
  type: 'type',
  status: 'status',
  visibility: 'visibility',
  category: 'category',
  url: 'url',
  version: 'version',
  versionNumber: 'versionNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishedAt: 'publishedAt',
  deletedAt: 'deletedAt',
  userId: 'userId'
};

exports.Prisma.DocumentVersionScalarFieldEnum = {
  id: 'id',
  documentationId: 'documentationId',
  version: 'version',
  content: 'content',
  changeLog: 'changeLog',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.DocumentTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentCommentScalarFieldEnum = {
  id: 'id',
  documentationId: 'documentationId',
  content: 'content',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.DocumentAttachmentScalarFieldEnum = {
  id: 'id',
  documentationId: 'documentationId',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.MindMapScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  description: 'description',
  overview: 'overview',
  nodeId: 'nodeId',
  theme: 'theme',
  layout: 'layout',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  userId: 'userId'
};

exports.Prisma.MindMapNodeScalarFieldEnum = {
  id: 'id',
  mindMapId: 'mindMapId',
  content: 'content',
  note: 'note',
  nodeType: 'nodeType',
  parentId: 'parentId',
  position: 'position',
  expanded: 'expanded',
  style: 'style',
  link: 'link',
  icon: 'icon',
  priority: 'priority',
  progress: 'progress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DomainKnowledgeScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  domain: 'domain',
  description: 'description',
  category: 'category',
  tags: 'tags',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  userId: 'userId'
};

exports.Prisma.DomainConceptScalarFieldEnum = {
  id: 'id',
  domainKnowledgeId: 'domainKnowledgeId',
  name: 'name',
  definition: 'definition',
  examples: 'examples',
  relatedConcepts: 'relatedConcepts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DomainPatternScalarFieldEnum = {
  id: 'id',
  domainKnowledgeId: 'domainKnowledgeId',
  name: 'name',
  description: 'description',
  context: 'context',
  solution: 'solution',
  consequences: 'consequences',
  examples: 'examples',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DomainBestPracticeScalarFieldEnum = {
  id: 'id',
  domainKnowledgeId: 'domainKnowledgeId',
  title: 'title',
  description: 'description',
  rationale: 'rationale',
  implementation: 'implementation',
  benefits: 'benefits',
  considerations: 'considerations',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DomainAntiPatternScalarFieldEnum = {
  id: 'id',
  domainKnowledgeId: 'domainKnowledgeId',
  name: 'name',
  description: 'description',
  symptoms: 'symptoms',
  causes: 'causes',
  consequences: 'consequences',
  refactoring: 'refactoring',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DomainReferenceScalarFieldEnum = {
  id: 'id',
  domainKnowledgeId: 'domainKnowledgeId',
  title: 'title',
  type: 'type',
  url: 'url',
  author: 'author',
  publishDate: 'publishDate',
  summary: 'summary',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.RequirementScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  content: 'content',
  type: 'type',
  priority: 'priority',
  status: 'status',
  source: 'source',
  parentId: 'parentId',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  userId: 'userId'
};

exports.Prisma.RequirementQuestionScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  requirementId: 'requirementId',
  question: 'question',
  answer: 'answer',
  status: 'status',
  priority: 'priority',
  clarified: 'clarified',
  agentId: 'agentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  answeredAt: 'answeredAt'
};

exports.Prisma.RequirementAttachmentScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  requirementId: 'requirementId',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.RoadmapScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  roadmapId: 'roadmapId',
  name: 'name',
  description: 'description',
  targetDate: 'targetDate',
  status: 'status',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VersionScalarFieldEnum = {
  id: 'id',
  roadmapId: 'roadmapId',
  name: 'name',
  description: 'description',
  releaseDate: 'releaseDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  milestoneId: 'milestoneId',
  versionId: 'versionId',
  name: 'name',
  description: 'description',
  status: 'status',
  priority: 'priority',
  effort: 'effort',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SprintScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  goal: 'goal',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  sprintId: 'sprintId',
  teamId: 'teamId',
  title: 'title',
  content: 'content',
  status: 'status',
  dueDate: 'dueDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  featureId: 'featureId'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  name: 'name',
  avatar: 'avatar',
  role: 'role',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  role: 'role',
  permissions: 'permissions',
  joinedAt: 'joinedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ApiMethod = exports.$Enums.ApiMethod = {
  GET: 'GET',
  POST: 'POST',
  PUT: 'PUT',
  DELETE: 'DELETE',
  PATCH: 'PATCH',
  OPTIONS: 'OPTIONS',
  HEAD: 'HEAD'
};

exports.ApiContentType = exports.$Enums.ApiContentType = {
  APPLICATION_JSON: 'APPLICATION_JSON',
  APPLICATION_XML: 'APPLICATION_XML',
  APPLICATION_FORM_URLENCODED: 'APPLICATION_FORM_URLENCODED',
  MULTIPART_FORM_DATA: 'MULTIPART_FORM_DATA',
  TEXT_PLAIN: 'TEXT_PLAIN'
};

exports.ApiAuthType = exports.$Enums.ApiAuthType = {
  NONE: 'NONE',
  BASIC: 'BASIC',
  BEARER: 'BEARER',
  API_KEY: 'API_KEY',
  OAUTH2: 'OAUTH2',
  CUSTOM: 'CUSTOM'
};

exports.ApiStatus = exports.$Enums.ApiStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  DEPRECATED: 'DEPRECATED',
  RETIRED: 'RETIRED'
};

exports.ArchitectureStatus = exports.$Enums.ArchitectureStatus = {
  DRAFT: 'DRAFT',
  REVIEWING: 'REVIEWING',
  APPROVED: 'APPROVED',
  DEPRECATED: 'DEPRECATED'
};

exports.DatabaseEngine = exports.$Enums.DatabaseEngine = {
  MYSQL: 'MYSQL',
  POSTGRESQL: 'POSTGRESQL',
  SQLITE: 'SQLITE',
  MONGODB: 'MONGODB',
  REDIS: 'REDIS',
  ELASTICSEARCH: 'ELASTICSEARCH'
};

exports.ColumnType = exports.$Enums.ColumnType = {
  INT: 'INT',
  BIGINT: 'BIGINT',
  DECIMAL: 'DECIMAL',
  FLOAT: 'FLOAT',
  DOUBLE: 'DOUBLE',
  VARCHAR: 'VARCHAR',
  CHAR: 'CHAR',
  TEXT: 'TEXT',
  LONGTEXT: 'LONGTEXT',
  DATE: 'DATE',
  TIME: 'TIME',
  DATETIME: 'DATETIME',
  TIMESTAMP: 'TIMESTAMP',
  BINARY: 'BINARY',
  VARBINARY: 'VARBINARY',
  BLOB: 'BLOB',
  BOOLEAN: 'BOOLEAN',
  JSON: 'JSON',
  UUID: 'UUID',
  ENUM: 'ENUM'
};

exports.IndexType = exports.$Enums.IndexType = {
  PRIMARY: 'PRIMARY',
  UNIQUE: 'UNIQUE',
  INDEX: 'INDEX',
  FULLTEXT: 'FULLTEXT',
  SPATIAL: 'SPATIAL'
};

exports.RelationType = exports.$Enums.RelationType = {
  ONE_TO_ONE: 'ONE_TO_ONE',
  ONE_TO_MANY: 'ONE_TO_MANY',
  MANY_TO_ONE: 'MANY_TO_ONE',
  MANY_TO_MANY: 'MANY_TO_MANY'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  OVERVIEW: 'OVERVIEW',
  TECHNICAL: 'TECHNICAL',
  DESIGN: 'DESIGN',
  RESEARCH: 'RESEARCH',
  USER_GUIDE: 'USER_GUIDE',
  API_DOC: 'API_DOC',
  OTHER: 'OTHER'
};

exports.DocumentStatus = exports.$Enums.DocumentStatus = {
  DRAFT: 'DRAFT',
  REVIEWING: 'REVIEWING',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.DocumentVisibility = exports.$Enums.DocumentVisibility = {
  PUBLIC: 'PUBLIC',
  INTERNAL: 'INTERNAL',
  PRIVATE: 'PRIVATE'
};

exports.NodeType = exports.$Enums.NodeType = {
  ROOT: 'ROOT',
  TOPIC: 'TOPIC',
  SUBTOPIC: 'SUBTOPIC',
  DETAIL: 'DETAIL',
  REFERENCE: 'REFERENCE'
};

exports.KnowledgeCategory = exports.$Enums.KnowledgeCategory = {
  BUSINESS: 'BUSINESS',
  TECHNICAL: 'TECHNICAL',
  DOMAIN_SPECIFIC: 'DOMAIN_SPECIFIC',
  GENERAL: 'GENERAL'
};

exports.RequirementType = exports.$Enums.RequirementType = {
  FUNCTIONAL: 'FUNCTIONAL',
  NON_FUNCTIONAL: 'NON_FUNCTIONAL',
  BUSINESS: 'BUSINESS',
  TECHNICAL: 'TECHNICAL'
};

exports.RequirementPriority = exports.$Enums.RequirementPriority = {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.RequirementStatus = exports.$Enums.RequirementStatus = {
  DRAFT: 'DRAFT',
  REVIEWING: 'REVIEWING',
  CONFIRMED: 'CONFIRMED',
  IMPLEMENTED: 'IMPLEMENTED',
  DEPRECATED: 'DEPRECATED'
};

exports.RequirementSource = exports.$Enums.RequirementSource = {
  CUSTOMER: 'CUSTOMER',
  PRODUCT: 'PRODUCT',
  TECHNICAL: 'TECHNICAL',
  INTERNAL: 'INTERNAL'
};

exports.QuestionStatus = exports.$Enums.QuestionStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE'
};

exports.QuestionPriority = exports.$Enums.QuestionPriority = {
  URGENT: 'URGENT',
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  USER: 'USER',
  GUEST: 'GUEST'
};

exports.ProjectRole = exports.$Enums.ProjectRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER'
};

exports.Prisma.ModelName = {
  Agent: 'Agent',
  AgentTask: 'AgentTask',
  AgentActivity: 'AgentActivity',
  AgentWorklog: 'AgentWorklog',
  AgentPromptTemplate: 'AgentPromptTemplate',
  ApiDesign: 'ApiDesign',
  ApiExample: 'ApiExample',
  ApiErrorCode: 'ApiErrorCode',
  SystemArchitecture: 'SystemArchitecture',
  PlatformArchitecture: 'PlatformArchitecture',
  ArchitectureChangeHistory: 'ArchitectureChangeHistory',
  DatabaseSchema: 'DatabaseSchema',
  DatabaseTable: 'DatabaseTable',
  TableColumn: 'TableColumn',
  DatabaseIndex: 'DatabaseIndex',
  DatabaseRelation: 'DatabaseRelation',
  Documentation: 'Documentation',
  DocumentVersion: 'DocumentVersion',
  DocumentTag: 'DocumentTag',
  DocumentComment: 'DocumentComment',
  DocumentAttachment: 'DocumentAttachment',
  MindMap: 'MindMap',
  MindMapNode: 'MindMapNode',
  DomainKnowledge: 'DomainKnowledge',
  DomainConcept: 'DomainConcept',
  DomainPattern: 'DomainPattern',
  DomainBestPractice: 'DomainBestPractice',
  DomainAntiPattern: 'DomainAntiPattern',
  DomainReference: 'DomainReference',
  Project: 'Project',
  Requirement: 'Requirement',
  RequirementQuestion: 'RequirementQuestion',
  RequirementAttachment: 'RequirementAttachment',
  Roadmap: 'Roadmap',
  Milestone: 'Milestone',
  Version: 'Version',
  Feature: 'Feature',
  Sprint: 'Sprint',
  Task: 'Task',
  Team: 'Team',
  User: 'User',
  Session: 'Session',
  ProjectMember: 'ProjectMember',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
