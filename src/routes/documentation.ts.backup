import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';
import { DocumentationService } from '../services/documentation.service';

export default async function documentationRoutes(fastify: FastifyInstance) {
    // 获取所有文档
    fastify.get('/documentation', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const result = await DocumentationService.getAllDocumentation();
            return reply.send(result);
        } catch (error) {
            return reply.status(500).send({
                success: false,
                error: error instanceof Error ? error.message : '获取文档列表失败',
            });
        }
    });

    // 根据ID获取文档
    fastify.get('/documentation/:id', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { id } = request.params as { id: string };
            const result = await DocumentationService.getDocumentationById(id);
            return reply.send(result);
        } catch (error) {
            return reply.status(404).send({
                success: false,
                error: error instanceof Error ? error.message : '获取文档详情失败',
            });
        }
    });

    // 创建文档
    fastify.post('/documentation', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const result = await DocumentationService.createDocumentation(request.body as any);
            return reply.status(201).send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '创建文档失败',
            });
        }
    });

    // 更新文档
    fastify.put('/documentation/:id', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { id } = request.params as { id: string };
            const result = await DocumentationService.updateDocumentation(id, request.body as any);
            return reply.send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '更新文档失败',
            });
        }
    });

    // 删除文档
    fastify.delete('/documentation/:id', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { id } = request.params as { id: string };
            const result = await DocumentationService.deleteDocumentation(id);
            return reply.send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '删除文档失败',
            });
        }
    });

    // 创建需求
    fastify.post('/requirements', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const result = await DocumentationService.createRequirement(request.body as any);
            return reply.status(201).send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '创建需求失败',
            });
        }
    });

    // 获取项目需求
    fastify.get('/projects/:projectId/requirements', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { projectId } = request.params as { projectId: string };
            const result = await DocumentationService.getProjectRequirements(projectId);
            return reply.send(result);
        } catch (error) {
            return reply.status(500).send({
                success: false,
                error: error instanceof Error ? error.message : '获取项目需求失败',
            });
        }
    });

    // 创建需求问题
    fastify.post('/requirement-questions', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const result = await DocumentationService.createRequirementQuestion(request.body as any);
            return reply.status(201).send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '创建问题失败',
            });
        }
    });

    // 获取项目问题
    fastify.get('/projects/:projectId/questions', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { projectId } = request.params as { projectId: string };
            const result = await DocumentationService.getProjectQuestions(projectId);
            return reply.send(result);
        } catch (error) {
            return reply.status(500).send({
                success: false,
                error: error instanceof Error ? error.message : '获取项目问题失败',
            });
        }
    });

    // 创建领域知识
    fastify.post('/domain-knowledge', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const result = await DocumentationService.createDomainKnowledge(request.body as any);
            return reply.status(201).send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '创建领域知识失败',
            });
        }
    });

    // 获取项目领域知识
    fastify.get('/projects/:projectId/domain-knowledge', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { projectId } = request.params as { projectId: string };
            const result = await DocumentationService.getProjectDomainKnowledge(projectId);
            return reply.send(result);
        } catch (error) {
            return reply.status(500).send({
                success: false,
                error: error instanceof Error ? error.message : '获取项目领域知识失败',
            });
        }
    });

    // 获取文档统计信息
    fastify.get('/documentation/stats', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { projectId } = request.query as { projectId?: string };
            const result = await DocumentationService.getDocumentationStats(projectId);
            return reply.send(result);
        } catch (error) {
            return reply.status(500).send({
                success: false,
                error: error instanceof Error ? error.message : '获取文档统计信息失败',
            });
        }
    });

    // 创建脑图 (MindMap)
    fastify.post('/mindmap', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const result = await DocumentationService.createMindMap(request.body as any);
            return reply.status(201).send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '创建脑图失败',
            });
        }
    });

    // 获取项目脑图 (MindMap)
    fastify.get('/projects/:projectId/mindmap', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { projectId } = request.params as { projectId: string };
            const result = await DocumentationService.getProjectMindMap(projectId);
            return reply.send(result);
        } catch (error) {
            return reply.status(500).send({
                success: false,
                error: error instanceof Error ? error.message : '获取项目脑图失败',
            });
        }
    });

    // 更新脑图 (MindMap)
    fastify.put('/mindmap/:id', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { id } = request.params as { id: string };
            const result = await DocumentationService.updateMindMap(id, request.body as any);
            return reply.send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '更新脑图失败',
            });
        }
    });

    // 删除脑图 (MindMap)
    fastify.delete('/mindmap/:id', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { id } = request.params as { id: string };
            const result = await DocumentationService.deleteMindMap(id);
            return reply.send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '删除脑图失败',
            });
        }
    });

    // 创建系统架构
    fastify.post('/system-architecture', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const result = await DocumentationService.createSystemArchitecture(request.body as any);
            return reply.status(201).send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '创建系统架构失败',
            });
        }
    });

    // 获取项目系统架构
    fastify.get('/projects/:projectId/system-architecture', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { projectId } = request.params as { projectId: string };
            const result = await DocumentationService.getProjectSystemArchitecture(projectId);
            return reply.send(result);
        } catch (error) {
            return reply.status(500).send({
                success: false,
                error: error instanceof Error ? error.message : '获取项目系统架构失败',
            });
        }
    });

    // 更新系统架构
    fastify.put('/system-architecture/:id', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { id } = request.params as { id: string };
            const result = await DocumentationService.updateSystemArchitecture(id, request.body as any);
            return reply.send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '更新系统架构失败',
            });
        }
    });

    // 删除系统架构
    fastify.delete('/system-architecture/:id', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { id } = request.params as { id: string };
            const result = await DocumentationService.deleteSystemArchitecture(id);
            return reply.send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '删除系统架构失败',
            });
        }
    });

    // 创建平台架构
    fastify.post('/platform-architecture', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const result = await DocumentationService.createPlatformArchitecture(request.body as any);
            return reply.status(201).send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '创建平台架构失败',
            });
        }
    });

    // 获取系统架构的平台架构列表
    fastify.get('/system-architecture/:systemArchitectureId/platforms', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { systemArchitectureId } = request.params as { systemArchitectureId: string };
            const result = await DocumentationService.getSystemPlatformArchitectures(systemArchitectureId);
            return reply.send(result);
        } catch (error) {
            return reply.status(500).send({
                success: false,
                error: error instanceof Error ? error.message : '获取平台架构列表失败',
            });
        }
    });

    // 更新平台架构
    fastify.put('/platform-architecture/:id', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { id } = request.params as { id: string };
            const result = await DocumentationService.updatePlatformArchitecture(id, request.body as any);
            return reply.send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '更新平台架构失败',
            });
        }
    });

    // 删除平台架构
    fastify.delete('/platform-architecture/:id', async (request: FastifyRequest, reply: FastifyReply) => {
        try {
            const { id } = request.params as { id: string };
            const result = await DocumentationService.deletePlatformArchitecture(id);
            return reply.send(result);
        } catch (error) {
            return reply.status(400).send({
                success: false,
                error: error instanceof Error ? error.message : '删除平台架构失败',
            });
        }
    });
} 